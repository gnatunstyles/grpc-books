// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/app.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GetClient is the client API for Get service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetClient interface {
	Authors(ctx context.Context, in *GetAuthorRequest, opts ...grpc.CallOption) (Get_AuthorsClient, error)
	Books(ctx context.Context, in *GetBooksRequest, opts ...grpc.CallOption) (Get_BooksClient, error)
}

type getClient struct {
	cc grpc.ClientConnInterface
}

func NewGetClient(cc grpc.ClientConnInterface) GetClient {
	return &getClient{cc}
}

func (c *getClient) Authors(ctx context.Context, in *GetAuthorRequest, opts ...grpc.CallOption) (Get_AuthorsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Get_ServiceDesc.Streams[0], "/api.Get/Authors", opts...)
	if err != nil {
		return nil, err
	}
	x := &getAuthorsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Get_AuthorsClient interface {
	Recv() (*Author, error)
	grpc.ClientStream
}

type getAuthorsClient struct {
	grpc.ClientStream
}

func (x *getAuthorsClient) Recv() (*Author, error) {
	m := new(Author)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *getClient) Books(ctx context.Context, in *GetBooksRequest, opts ...grpc.CallOption) (Get_BooksClient, error) {
	stream, err := c.cc.NewStream(ctx, &Get_ServiceDesc.Streams[1], "/api.Get/Books", opts...)
	if err != nil {
		return nil, err
	}
	x := &getBooksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Get_BooksClient interface {
	Recv() (*Book, error)
	grpc.ClientStream
}

type getBooksClient struct {
	grpc.ClientStream
}

func (x *getBooksClient) Recv() (*Book, error) {
	m := new(Book)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GetServer is the server API for Get service.
// All implementations must embed UnimplementedGetServer
// for forward compatibility
type GetServer interface {
	Authors(*GetAuthorRequest, Get_AuthorsServer) error
	Books(*GetBooksRequest, Get_BooksServer) error
	mustEmbedUnimplementedGetServer()
}

// UnimplementedGetServer must be embedded to have forward compatible implementations.
type UnimplementedGetServer struct {
}

func (UnimplementedGetServer) Authors(*GetAuthorRequest, Get_AuthorsServer) error {
	return status.Errorf(codes.Unimplemented, "method Authors not implemented")
}
func (UnimplementedGetServer) Books(*GetBooksRequest, Get_BooksServer) error {
	return status.Errorf(codes.Unimplemented, "method Books not implemented")
}
func (UnimplementedGetServer) mustEmbedUnimplementedGetServer() {}

// UnsafeGetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetServer will
// result in compilation errors.
type UnsafeGetServer interface {
	mustEmbedUnimplementedGetServer()
}

func RegisterGetServer(s grpc.ServiceRegistrar, srv GetServer) {
	s.RegisterService(&Get_ServiceDesc, srv)
}

func _Get_Authors_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAuthorRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GetServer).Authors(m, &getAuthorsServer{stream})
}

type Get_AuthorsServer interface {
	Send(*Author) error
	grpc.ServerStream
}

type getAuthorsServer struct {
	grpc.ServerStream
}

func (x *getAuthorsServer) Send(m *Author) error {
	return x.ServerStream.SendMsg(m)
}

func _Get_Books_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetBooksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GetServer).Books(m, &getBooksServer{stream})
}

type Get_BooksServer interface {
	Send(*Book) error
	grpc.ServerStream
}

type getBooksServer struct {
	grpc.ServerStream
}

func (x *getBooksServer) Send(m *Book) error {
	return x.ServerStream.SendMsg(m)
}

// Get_ServiceDesc is the grpc.ServiceDesc for Get service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Get_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Get",
	HandlerType: (*GetServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Authors",
			Handler:       _Get_Authors_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Books",
			Handler:       _Get_Books_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/app.proto",
}
