// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/app.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GetClient is the client API for Get service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetClient interface {
	Authors(ctx context.Context, in *GetAuthorRequest, opts ...grpc.CallOption) (*GetAuthorResponse, error)
	Books(ctx context.Context, in *GetBooksRequest, opts ...grpc.CallOption) (*GetBooksResponse, error)
}

type getClient struct {
	cc grpc.ClientConnInterface
}

func NewGetClient(cc grpc.ClientConnInterface) GetClient {
	return &getClient{cc}
}

func (c *getClient) Authors(ctx context.Context, in *GetAuthorRequest, opts ...grpc.CallOption) (*GetAuthorResponse, error) {
	out := new(GetAuthorResponse)
	err := c.cc.Invoke(ctx, "/api.Get/Authors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getClient) Books(ctx context.Context, in *GetBooksRequest, opts ...grpc.CallOption) (*GetBooksResponse, error) {
	out := new(GetBooksResponse)
	err := c.cc.Invoke(ctx, "/api.Get/Books", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetServer is the server API for Get service.
// All implementations must embed UnimplementedGetServer
// for forward compatibility
type GetServer interface {
	Authors(context.Context, *GetAuthorRequest) (*GetAuthorResponse, error)
	Books(context.Context, *GetBooksRequest) (*GetBooksResponse, error)
	mustEmbedUnimplementedGetServer()
}

// UnimplementedGetServer must be embedded to have forward compatible implementations.
type UnimplementedGetServer struct {
}

func (UnimplementedGetServer) Authors(context.Context, *GetAuthorRequest) (*GetAuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authors not implemented")
}
func (UnimplementedGetServer) Books(context.Context, *GetBooksRequest) (*GetBooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Books not implemented")
}
func (UnimplementedGetServer) mustEmbedUnimplementedGetServer() {}

// UnsafeGetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetServer will
// result in compilation errors.
type UnsafeGetServer interface {
	mustEmbedUnimplementedGetServer()
}

func RegisterGetServer(s grpc.ServiceRegistrar, srv GetServer) {
	s.RegisterService(&Get_ServiceDesc, srv)
}

func _Get_Authors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetServer).Authors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Get/Authors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetServer).Authors(ctx, req.(*GetAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Get_Books_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetServer).Books(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Get/Books",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetServer).Books(ctx, req.(*GetBooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Get_ServiceDesc is the grpc.ServiceDesc for Get service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Get_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Get",
	HandlerType: (*GetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authors",
			Handler:    _Get_Authors_Handler,
		},
		{
			MethodName: "Books",
			Handler:    _Get_Books_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/app.proto",
}
